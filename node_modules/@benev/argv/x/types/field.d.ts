import { Type } from "./type.js";
import { Values } from "./values.js";
import { TypeToValue } from "./type-to-value.js";
import { ValueToType } from "./value-to-type.js";
export declare namespace Field {
    type Mode = "requirement" | "option" | "default";
    type Base<T extends Type> = {
        mode: Mode;
        type: T;
        help?: string;
    };
    type Requirement<T extends Type> = Base<T> & {
        mode: "requirement";
    };
    type Option<T extends Type> = Base<T> & {
        mode: "option";
    };
    type Default<T extends Type> = Base<T> & {
        mode: "default";
        default: TypeToValue<T>;
    };
    type Any<T extends Type> = (Requirement<T> | Option<T> | Default<T>);
    type Group = {
        [key: string]: Any<Type>;
    };
    type GroupFromValues<X extends Values> = {
        [key in keyof X]: Any<ValueToType<X[key]>>;
    };
    type ValuesFromGroup<F extends Group> = {
        [key in keyof F]: F[key] extends Option<F[key]["type"]> ? TypeToValue<F[key]["type"]> | undefined : TypeToValue<F[key]["type"]>;
    };
}
