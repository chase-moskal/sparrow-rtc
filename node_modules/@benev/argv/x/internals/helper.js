import { makeTips, stdcolumns } from "./constants.js";
import { stdtheme } from "../theme.js";
import { textblock } from "./helping/textblock.js";
import { fieldReport } from "./helping/field-report.js";
import { retrieveValue } from "./helping/retrieve-value.js";
export function* helper({ spec, args = {}, params = {}, }) {
    var _a, _b, _c;
    const theme = (_a = spec.theme) !== null && _a !== void 0 ? _a : stdtheme;
    const tips = (_b = spec.tips) !== null && _b !== void 0 ? _b : true;
    const columns = ((_c = spec.columns) !== null && _c !== void 0 ? _c : stdcolumns) - 4;
    const argorder = spec.argorder;
    const argnum = argorder.length;
    yield (theme.binary(spec.program)
        + " "
        + (argorder
            .map(a => theme.arg(`<${a}>`))
            .join(" "))
        + (argnum === 0 ? "" : " ")
        + theme.param("{parameters}"));
    if (spec.readme)
        yield theme.readme("  readme ") + theme.link(spec.readme);
    if (spec.help)
        yield textblock({
            columns,
            indent: [2, " "],
            text: spec.help,
        });
    for (const name of argorder)
        yield fieldReport({
            name,
            columns,
            theme,
            field: spec.args[name],
            value: retrieveValue(args, name),
            color: theme.arg,
        });
    for (const [name, field] of Object.entries(spec.params))
        yield fieldReport({
            name: "--" + name,
            field,
            columns,
            theme,
            value: retrieveValue(params, name),
            color: theme.param,
        });
    if (tips) {
        yield "";
        yield theme.tip("tips");
        yield textblock({
            columns,
            indent: [2, " "],
            text: makeTips(theme),
        });
    }
}
//# sourceMappingURL=helper.js.map