import { parseValue } from "./parse-value.js";
import { undash } from "./undash.js";
export function parsingMachine(spec) {
    let paramIndex = 0;
    let scheduledParamAssignment = undefined;
    function getArgType(name) {
        return name in spec.args
            ? spec.args[name]["type"]
            : String;
    }
    function getParamType(name) {
        return name in spec.params
            ? spec.params[name]["type"]
            : String;
    }
    const args = {};
    const params = {};
    return {
        args,
        params,
        scheduledParamAssignment: () => {
            return scheduledParamAssignment;
        },
        scheduleNextItemAsParamValue: (item) => {
            scheduledParamAssignment = undash(item);
        },
        saveParamTrue: (item) => {
            params[undash(item)] = true;
        },
        saveScheduledParam: (item) => {
            const name = scheduledParamAssignment;
            scheduledParamAssignment = undefined;
            params[name] = parseValue(getParamType(name), item);
        },
        saveArg: (item) => {
            const index = paramIndex++;
            const name = spec.argorder[index];
            args[name] = parseValue(getArgType(name), item);
        },
        saveEqualSignedParam(item) {
            const [name, value] = undash(item).split("=");
            params[name] = parseValue(getParamType(name), value);
        },
        saveShorthandBoolean(item) {
            const name = item.slice(1);
            params[name] = true;
        },
    };
}
//# sourceMappingURL=machine.js.map